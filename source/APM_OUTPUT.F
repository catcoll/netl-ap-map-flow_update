      SUBROUTINE OUTPUT_DATA
C
C     WRITTEN BY: MATTHEW STADELMAN
C
C     PROGRAM DESCRIPTON: OUTPUTS THE DATA FROM THE LCL MODEL INTO
C         INTO SEVERAL FILES FOR POST-PROCESSING AND VIEWING.
C
C     DATE WRITTEN:  2015/03/02
C     LAST MODIFIED: 2016/02/17
C
C     SUBROUTINE CALLS: CALC_PERCENTILE
C
C ---------------------------------------------------------------------
C     VARIABLE DESCRIPTION:
C       PQX_OUT - X FLOW DATA USED FOR VECTOR PLOTTING
C       PQZ_OUT - Z FLOW DATA USED FOR VECTOR PLOTTING
C       PQZ_OUT - FLOW MAGNITUDE DATA USED FOR FLOW MAP AND REYNOLDS CALCULATION
C       REN - ARRAY THAT STORES THE ESTIMATED REYNOLDS NUMBER FOR A CELL
C       RES - ARRAY THAT STORES NORMALIZED MASS/GAIN LOSSES FOR A CELL
C       FLOW - TOTAL FLOW OUT OF THE FRACTURE
C       NFQ - 1-D EQUIVALENT FLOW
C       AVG_CORR - AVERAGE OF X AND Z CORRELTION LENGTHS, USED IN CALCULATIONS
C       BULK_REN - OVERALL REYNOLDS NUMBER FOR THE FRACTURE
C       HOM_TRANS - AVERAGE FRACTURE TRANSMISSIBILITY
C       X,Y,Z - POINT COORDINATES USED TO CREATE VTK MESH
C
C ----------------------------------------------------------------------
C
      USE APM_MODULE
C
      IMPLICIT NONE
      REAL(8), ALLOCATABLE :: PQX_OUT(:),PQZ_OUT(:),PQM_OUT(:)
      REAL(8), ALLOCATABLE :: REN(:),RES(:)
      REAL(8) :: FLOW,NFQ,AVG_CORR,BULK_REN,HOM_TRANS
      REAL(8) :: X,Y,Z
      INTEGER :: I,J,N,IX,IZ,IC,LB
C
C     INITIALIZING VARIABLES
      LB = NX*NZ
      N = 5 !NUMBER OF FLOW VALUES TO CALCULATE
      ALLOCATE(PQX_OUT(LB),PQZ_OUT(LB),PQM_OUT(LB))
      ALLOCATE(RES(LB),REN(LB))
C
C     CALCULATION OF OUTPUT DATA
C
C     CALCULATING FLOW RATE FROM FRACTURE
      NFQ = 0.0
      FLOW = 0.0
      DO IC = 1,NC
        I = PBCELLS(IC)
        IF (INDEX(OUTFLOW,'LEFT') > 0)   FLOW = FLOW + Q(1,I)
        IF (INDEX(OUTFLOW,'RIGHT') > 0)  FLOW = FLOW + Q(2,I)
        IF (INDEX(OUTFLOW,'TOP') > 0)    FLOW = FLOW + Q(3,I)
        IF (INDEX(OUTFLOW,'BOTTOM') > 0) FLOW = FLOW + Q(4,I)
      END DO
      FLOW = ABS(FLOW)
C
C     CALCULATING FLOW CORRECTION FACTOR AND THE 1-D EQUIVALENT FLOW RATE
      IF ((INDEX(OUTFLOW,'RIGHT')+INDEX(OUTFLOW,'LEFT')) > 0) THEN
        FLOW_CF =   ABS(FLOW/(FPSB-OUTPSB)/AVG_TRX)
        NFQ =       ABS(AVG_TRX*(FPSB-OUTPSB)*STD_CONV)
        HOM_TRANS = ABS(FLOW/(FPSB-OUTPSB))*AVG_VISC*DIAM
        BULK_REN = (2*RHO*FLOW)/(AVG_VISC*LENG)
      ELSEIF ((INDEX(OUTFLOW,'TOP')+INDEX(OUTFLOW,'BOTTOM')) > 0) THEN
        FLOW_CF =   ABS(FLOW/(FPSB-OUTPSB)/AVG_TRZ)
        NFQ =       ABS(AVG_TRZ*(FPSB-OUTPSB)*STD_CONV)
        HOM_TRANS = ABS(FLOW/(FPSB-OUTPSB))*AVG_VISC*LENG
        BULK_REN = (2*RHO*FLOW)/(AVG_VISC*DIAM)
      END IF
      FLOW = FLOW*STD_CONV
C
C     LOGGING FINAL PRESSURES, FLOW RATES AND RESIDUAL TO SCREEN
      WRITE(CVAR,600)"FINAL",OUTPB*PRES_CONV,TRIM(UNIT_OUT(1))
      CALL MESSAGE(CVAR)
      WRITE(CVAR,605)"FINAL",FLOW*RATE_CONV,TRIM(UNIT_OUT(5))
      CALL MESSAGE(CVAR)
      WRITE(CVAR,640)Q(5,MAXLOC(ABS(Q(5,1:LB))))
      CALL MESSAGE(CVAR)
C
C     CONVERTING VALUES IN INTERNAL UNITS TO OUTPUT UNITS
      AP_MAP = AP_MAP*DIM_CONV
      FRAC_PR = FRAC_PR*PRES_CONV
      FPB = FPB*PRES_CONV
      OUTPB = OUTPB*PRES_CONV
      DX = DX*DIM_CONV
      DZ = DZ*DIM_CONV
      DIAM = DIAM*DIM_CONV
      LENG = LENG*DIM_CONV
      WIDTH = WIDTH*DIM_CONV
      AVG_APER = AVG_APER*DIM_CONV
      APER_RMS = APER_RMS*DIM_CONV
      APER_DEV = APER_DEV*DIM_CONV
      Z_CORR = Z_CORR*DIM_CONV
      X_CORR = X_CORR*DIM_CONV
      AVG_CORR = (2*X_CORR*Z_CORR)/(X_CORR+Z_CORR)
      FLOW = FLOW*RATE_CONV
      NFQ = NFQ*RATE_CONV
      ! NORMALIZING RESIDUAL ARRAY BY THE LARGEST RESIDUAL VALUE
      RES = ABS(Q(5,1:LB))
      RES = RES/MAXVAL(RES)
      !
      ! DEFAULT DIRECTIONS ARE RIGHT AND TOP
      PQX_OUT = Q(2,1:LB)*RATE_CONV*STD_CONV
      PQZ_OUT = Q(4,1:LB)*RATE_CONV*STD_CONV
      ! CHECKING IF OUTFLOW IS A DIFFERENT SIDE
      IF (INDEX(OUTFLOW,'LEFT') > 0) THEN
        PQX_OUT = Q(1,1:LB)*RATE_CONV*STD_CONV
      ELSEIF (INDEX(OUTFLOW,'BOTTOM') > 0) THEN
        PQZ_OUT = Q(3,1:LB)*RATE_CONV*STD_CONV
      END IF
C
C     CALCULATING FLOW MAGNITUDE AND APPROXIMATE REYNOLDS NUMBER
      DO I = 1,LB
        PQM_OUT(I) = SQRT(PQX_OUT(I)**2+PQZ_OUT(I)**2)
        REN(I) = (RHO*PQM_OUT(I)/RATE_CONV)/(AVG_VISC*WIDTH(I)/DIM_CONV)
      END DO
C
C     CALCULATING FLOW RATE PERCENTILES FOR X, Z COMPONENTS AND MAGNITUDE
      IF (PERCENTILE) THEN
        CALL CALC_PERCENTILE(PQX_OUT,PERC_ARR,NX*NZ,NPCT)
        CALL BLANK
        WRITE(CVAR,2210)
        CALL MESSAGE(CVAR)
        WRITE(CVAR,2200) 'X-FLOW'
        CALL MESSAGE(CVAR)
        WRITE(CVAR,2210)
        CALL MESSAGE(CVAR)
        WRITE(CVAR,2225)'PERCENTILE','['//TRIM(UNIT_OUT(5))//']'
        CALL MESSAGE(CVAR)
        WRITE(CVAR,2210)
        CALL MESSAGE(CVAR)
        DO I = 1,NPCT
          WRITE(CVAR,2230)PERC_ARR(1,I),PERC_ARR(2,I)
          CALL MESSAGE(CVAR)
        END DO
        WRITE(CVAR,2210)
        CALL MESSAGE(CVAR)
        !
        CALL CALC_PERCENTILE(PQZ_OUT,PERC_ARR,NX*NZ,NPCT)
        CALL BLANK
        WRITE(CVAR,2210)
        CALL MESSAGE(CVAR)
        WRITE(CVAR,2200) 'Z-FLOW'
        CALL MESSAGE(CVAR)
        WRITE(CVAR,2210)
        CALL MESSAGE(CVAR)
        WRITE(CVAR,2225)'PERCENTILE','['//TRIM(UNIT_OUT(5))//']'
        CALL MESSAGE(CVAR)
        WRITE(CVAR,2210)
        CALL MESSAGE(CVAR)
        DO I = 1,NPCT
          WRITE(CVAR,2230)PERC_ARR(1,I),PERC_ARR(2,I)
          CALL MESSAGE(CVAR)
        END DO
        WRITE(CVAR,2210)
        CALL MESSAGE(CVAR)
        !
        CALL CALC_PERCENTILE(PQM_OUT,PERC_ARR,NX*NZ,NPCT)
        CALL BLANK
        WRITE(CVAR,2210)
        CALL MESSAGE(CVAR)
        WRITE(CVAR,2200) 'FLOW MAGNITUDE'
        CALL MESSAGE(CVAR)
        WRITE(CVAR,2210)
        CALL MESSAGE(CVAR)
        WRITE(CVAR,2225)'PERCENTILE','['//TRIM(UNIT_OUT(5))//']'
        CALL MESSAGE(CVAR)
        WRITE(CVAR,2210)
        CALL MESSAGE(CVAR)
        DO I = 1,NPCT
          WRITE(CVAR,2230)PERC_ARR(1,I),PERC_ARR(2,I)
          CALL MESSAGE(CVAR)
        END DO
        WRITE(CVAR,2210)
        CALL MESSAGE(CVAR)
C
C       CALCULATING PERCENTILES FOR THE NORMALIZED RESIDUAL
        CALL CALC_PERCENTILE(RES,PERC_ARR,NX*NZ,NPCT)
        CALL BLANK
        WRITE(CVAR,2210)
        CALL MESSAGE(CVAR)
        WRITE(CVAR,2200) 'NORMALIZED RESIDUAL'
        CALL MESSAGE(CVAR)
        WRITE(CVAR,2210)
        CALL MESSAGE(CVAR)
        WRITE(CVAR,2225)'PERCENTILE','[-]'
        CALL MESSAGE(CVAR)
        WRITE(CVAR,2210)
        CALL MESSAGE(CVAR)
        DO I = 1,NPCT
          WRITE(CVAR,2230)PERC_ARR(1,I),PERC_ARR(2,I)
          CALL MESSAGE(CVAR)
        END DO
        WRITE(CVAR,2210)
        CALL MESSAGE(CVAR)
      END IF
C
      CALL BLANK
      CALL MESSAGE(" WRITING DATA TO OUTPUT FILES...")
C
C     OUTPUTTING DATA TO STATISTICS FILE
      WRITE(ISTAT,650) TRIM(UNIT_OUT(1)),TRIM(UNIT_OUT(1))
      WRITE(ISTAT,"(2(G20.9,',',:))") FPB,OUTPB
C
      WRITE(ISTAT,"(A)")'#'
      WRITE(ISTAT,655)TRIM(UNIT_OUT(2)),TRIM(UNIT_OUT(2)),
     &      TRIM(UNIT_OUT(2)),TRIM(UNIT_OUT(2)),TRIM(UNIT_OUT(2))
      WRITE(ISTAT,"(*(F18.6,',',:))")APER_RMS,APER_DEV,X_CORR,Z_CORR,
     &                               AVG_CORR
C
      WRITE(ISTAT,"(A)")'#'
      WRITE(ISTAT,660)
      WRITE(ISTAT,"(3(F18.6,',',:))")APER_DEV/AVG_APER,
     &      APER_DEV/AVG_CORR,AVG_APER/AVG_CORR
C
      WRITE(ISTAT,"(A)")'#'
      WRITE(ISTAT,665)
      WRITE(ISTAT,"(F10.6,',',E15.9,',',G15.9)")BULK_REN,HOM_TRANS,
     &     (FPB-OUTPB)/PRES_CONV
C
      WRITE(ISTAT,"(A)")'#'
      WRITE(ISTAT,700)TRIM(UNIT_OUT(5)),TRIM(UNIT_OUT(5))
      WRITE(ISTAT,701)FLOW,NFQ,FLOW_CF*100
C
C     OUTPUTTING THE WIDTH VECTOR USED IN THE SIMULATION
      DO IZ = 0,NZ-1
        I = IZ*NX+1
        J = IZ*NX+NX
        WRITE(IMAP,"(100000(G15.8,',',:))") WIDTH(I:J)
      END DO
      CALL MESSAGE("     ADJUSTED APERTURE FILE COMPLETED")
C
C     OUTPUTTING QX, QZ AND FLOW MAGNITUDE VALUES
      DO IZ = 0,NZ-1
        I = IZ*NX+1
        J = IZ*NX+NX
        WRITE(IFLOX,"(100000(G15.8,',',:))") PQX_OUT(I:J)
      END DO
C
      DO IZ = 0,NZ-1
        I = IZ*NX+1
        J = IZ*NX+NX
        WRITE(IFLOZ,"(100000(G15.8,',',:))") PQZ_OUT(I:J)
      END DO
C
      DO IZ = 0,NZ-1
        I = IZ*NX+1
        J = IZ*NX+NX
        WRITE(IFLOM,"(100000(G15.8,',',:))") PQM_OUT(I:J)
      END DO
      CALL MESSAGE("     FLOW FILE COMPLETED")
C
C     OUTPUTTING THE FRACTURE PRESSURE DISTRIBUTION
      DO IZ = 1,NZ
        WRITE(IPRES,"(100000(G15.8,',',:))") FRAC_PR(IZ,1:NX)
      END DO
      CALL MESSAGE("     PRESSURE FILE COMPLETED")
C
C     CREATING THE VTK FILE'S HEADERS FOR PARAVIEW EXPORT
      CALL BLANK
      CALL MESSAGE("     CREATING THE VTK FILE...")
      WRITE(IVTK,"('# vtk DataFile Version 3.0')")
      WRITE(IVTK,"('vtk output')")
      WRITE(IVTK,"('ASCII')")
      WRITE(IVTK,"('DATASET STRUCTURED_GRID')")
      WRITE(IVTK,"('DIMENSIONS ',I0,1X,I0,1X,I0)")NX+1,NZ+1,2
      WRITE(IVTK,"('POINTS ',I0,' float')")(NX+1)*(NZ+1)*2
C
C     OUPUTTING BOTTOM AND TOP SURFACE POINTS FOR THE GRID
      DO N = -1,1,2
        Z = 0.0
        DO IZ = 1,NZ
          X = 0.0
          Y = N*AP_MAP(IZ,1,1)/2.0
          WRITE(IVTK,"(3(F0.6,' ',:))")X,Y,Z
          DO IX = 1,NX
            I = (IZ - 1)*NX + IX
            X = X + DX(I)
            Y = N*AP_MAP(IZ,IX,2)/2.0
            WRITE(IVTK,"(3(F0.6,' ',:))")X,Y,Z
          END DO
          Z = Z + DZ(I)
        END DO
        !
        X = 0.0
        Y = N*AP_MAP(NZ,1,4)/2.0
        WRITE(IVTK,"(3(F0.6,' ',:))")X,Y,Z
        DO IX = 1,NX
          I = (NZ - 1)*NX + IX
          X = X + DX(I)
          Y = N*AP_MAP(NZ,IX,3)/2.0
          WRITE(IVTK,"(3(F0.6,' ',:))")X,Y,Z
        END DO
      END DO
      CALL MESSAGE("         VTK POINTS OUTPUT TO FILE")
C
C     OUTPUTTING SIMULATION DATA INTO THE VTK FILE
      CALL BLANK
      CALL MESSAGE("     OUTPUTTING DATA TO THE VTK FILE...")
C
C     CREATING THE DATA TABLES
      WRITE(IVTK,"(' ')")
      WRITE(IVTK,"('CELL_DATA ',I0)")NX*NZ*1
      WRITE(IVTK,"('SCALARS APERTURE[',A,'] float')")TRIM(UNIT_OUT(2))
      WRITE(IVTK,"('LOOKUP_TABLE default')")
      DO IZ = 1,NZ
        DO IX = 1,NX
          I = (IZ - 1)*NX + IX
          WRITE(IVTK,"(3(F0.6,' ',:))")WIDTH(I)
        END DO
      END DO
      CALL MESSAGE("         APERTURE DATA OUTPUT TO VTK FILE")
C
      WRITE(IVTK,"(' ')")
      WRITE(IVTK,"('SCALARS PRESSURE[',A,'] float')")TRIM(UNIT_OUT(1))
      WRITE(IVTK,"('LOOKUP_TABLE default')")
      DO IZ = 1,NZ
        DO IX = 1,NX
          WRITE(IVTK,"(3(F0.6,' ',:))")FRAC_PR(IZ,IX)
        END DO
      END DO
      CALL MESSAGE("         PRESSURE DATA OUTPUT TO VTK FILE")
C
      WRITE(IVTK,"(' ')")
      WRITE(IVTK,"('SCALARS REYNOLDS_NUMBER[] float')")
      WRITE(IVTK,"('LOOKUP_TABLE default')")
      DO IZ = 1,NZ
        DO IX = 1,NX
          I = (IZ - 1)*NX + IX
          WRITE(IVTK,"(3(F0.6,' ',:))")REN(I)
        END DO
      END DO
      CALL MESSAGE("         REYNOLDS NUMBER OUTPUT TO VTK FILE")
C
      WRITE(IVTK,"(' ')")
      WRITE(IVTK,"('SCALARS NORMALIZED_RESIDUALS[] float')")
      WRITE(IVTK,"('LOOKUP_TABLE default')")
      DO IZ = 1,NZ
        DO IX = 1,NX
          I = (IZ - 1)*NX + IX
          WRITE(IVTK,"(3(F0.6,' ',:))")RES(I)
        END DO
      END DO
      CALL MESSAGE("         NORMALIZED RESIDUALS OUTPUT TO VTK FILE")
C
      WRITE(IVTK,"(' ')")
      WRITE(IVTK,"('VECTORS FLOW[',A,'] float')")TRIM(UNIT_OUT(5))
      DO IZ = 1,NZ
        DO IX = 1,NX
          I = (IZ - 1)*NX + IX
          WRITE(IVTK,"(3(F0.6,' ',:))")PQX_OUT(I),0.0,PQZ_OUT(I)
        END DO
      END DO
      CALL MESSAGE("         VECTOR FLOW DATA OUTPUT TO VTK FILE")
C
C     DEALLOCATING FRACTURE PROPERTY VECTORS
      DEALLOCATE(PBCELLS,FRAC_PR,TRX,TRZ)
C     DEALLOCATING FLOW VECTORS
      DEALLOCATE(PQX_OUT,PQZ_OUT,WIDTH,DX,DZ)
C
      CALL BLANK
      CALL MESSAGE(" DEALLOCATED ALL ARRAYS")
C
      RETURN
C
  600 FORMAT(5X,A,' BOUNDARY PRESSURE: ',3X,G20.9,1X,A)
C
  605 FORMAT(5X,A,' FLOW RATE CALCULATED: ',G20.9,1X,A)
C
  640 FORMAT(5X,'MAXIMUM NET FLOW RESIDUAL: ',G20.9,1X,A)
C
  650 FORMAT(1X,'CONFINING PRES [',A,'],OUTLET PRES [',A,']')
C
  655 FORMAT(1X,'APERTURE RMS [',A,'],APERTURE STD DEV [',A,
     &'],X - CORRELATION LENGTH [',A,'],Z - CORRELATION LENGTH [',A,
     &'],AVG - CORRELATION LENGTH [',A,']')
C
  660 FORMAT(1X,'STD DEV / MEAN APER [-],STD DEV / AVG CORR LENGTH [-],'
     &          ,' MEAN APER / AVG CORR LENGTH [-]')
C
  665 FORMAT(1X,'BULK REYNOLDS # [-],AVERAGE TRANSMISSIBILTY [M^4],',
     &           'PRESSURE DIFFERENTIAL [PA]')
C
  700 FORMAT(1X,'2-D FLOW [',A,'],1-D EQIV [',A,'],% OF 1-D [-]')
C
  701 FORMAT(4(G18.9,',',:))
C
 2200 FORMAT(9X,A,1X,'RANGES')
C
 2210 FORMAT(9X,32('-'))
C
 2225 FORMAT(1X,A18,3X,'|',A17)
C
 2230 FORMAT(9X,'|',2X,F7.3,3X,'|',1X,F15.6,1X,'|')
      END SUBROUTINE


