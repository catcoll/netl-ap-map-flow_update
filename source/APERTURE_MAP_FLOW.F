      PROGRAM APERTURE_MAP_FLOW
C
C     WRITTEN BY: MATTHEW STADELMAN
C
C     PROGRAM DESCRIPTON: RUNS THE LOCAL CUBIC LAW MODEL ON A SUPPLIED
C         FRACTURE APERTURE MAP OUTPUTTING THE DATA TO MULTIPLE CSV FILES
C         AND A VTK FILE FOR USE WITH PARAVIEW. THIS PROGRAM WAS DESIGNED
C         UNDER AN ORISE APPOINTMENT AT THE NATIONAL ENERGY TECHNOLOGY LAB
C         IN MORGANTOWN WEST VIRGINIA.
C
C     DATE WRITTEN:  2016/02/12
C     LAST MODIFIED: 2016/03/07
C
C     SUBROUTINE CALLS: INITIALIZE_RUN, FRAC_FLOW, PS_TO_PR,
C                       OUTPUT_DATA
C
C ---------------------------------------------------------------------
C     VARIABLE DESCRIPTION:
C       Q(1:4,:) - FLOW THROUGH THE SIDES OF A CELL IN ORDER: LEFT,RIGHT,TOP,BOTTOM
C       Q(5,:) - STORES THE FINAL NET MASS GAIN/LOSS FOR A CELL
C       FLOW - TOTAL FLOW OUT OF THE FRACTURE
C       HOM_TRANS - AVERAGE FRACTURE TRANSMISSIBILITY
C       BOK - CONTROL VARIABLE USED TO HALT PROGRAM IF A FATAL ERROR IS ENCOUNTERED
C
C ----------------------------------------------------------------------
C
      USE APM_MODULE
C
      IMPLICIT NONE
      REAL(8) :: FLOW
      INTEGER :: I,IC,IX,IZ
      LOGICAL :: BOK
C
C     CONDITIONAL COMPILATION TO DETERMINE OS
      SYS_OS = "UNIX"
      IF (WIN64 == 1) THEN
        SYS_OS = "WINDOWS"
      ENDIF
C
C     INITIALIZING THE MODEL
      BOK   = .TRUE.
      CALL INITIALIZE_RUN(BOK)
      IF (.NOT. BOK) GOTO 1000
C
C     RUNNING SUBROUTINE TO SOLVE FOR FLOW
      CALL BLANK
      CALL MESSAGE(" CALCULATING FLOW THROUGH FRACTURE")
      IF (RATEC) THEN
        CALL FRAC_FLOW(BOK)
        IF (.NOT. BOK) GOTO 1000
        CALL BLANK
        CALL MESSAGE("     INTERMEDIATE FRACTURE FLOWS CALCULATED")
C
C       CALCULATING INTERMEDIATE VALUES TO CORRECT BOUNDARY PRESSURE
C       FOR INHOMOGENEOUS APERTURE
        CALL BLANK
        WRITE(CVAR,600)"INTERMEDIATE",OUTPB*PRES_CONV,TRIM(UNIT_OUT(1))
        CALL MESSAGE(CVAR)
C
        FLOW = 0.0
        DO IC = 1,NC
          I = PBCELLS(IC)
          IF (INDEX(OUTFLOW,'LEFT') > 0)   FLOW = FLOW + Q(1,I)
          IF (INDEX(OUTFLOW,'RIGHT') > 0)  FLOW = FLOW + Q(2,I)
          IF (INDEX(OUTFLOW,'BOTTOM') > 0) FLOW = FLOW + Q(3,I)
          IF (INDEX(OUTFLOW,'TOP') > 0)    FLOW = FLOW + Q(4,I)
        END DO
        FLOW = ABS(FLOW)
        WRITE(CVAR,605)"INTERMEDIATE",FLOW*RATE_CONV*STD_CONV,
     &                               TRIM(UNIT_OUT(5))
        CALL MESSAGE(CVAR)
C
C       SETTING UP SECOND RUN
        FRAC_PS(:,:) = FPSB
        !
        ! ADJUSTING PRESSURE BOUNDARY
        IF (INDEX(OUTFLOW,'LEFT') > 0) THEN
          FLOW_CF = ABS(FLOW/(FPSB-OUTPSB)/AVG_TRX)
          OUTRATE = OUTRATE/FLOW_CF
          OUTPSB = FPSB - OUTRATE/AVG_TRX
          DO IZ = 1,NZ
            FRAC_PS(IZ,0) = OUTPSB
          END DO
        ELSE IF (INDEX(OUTFLOW,'RIGHT') > 0) THEN
          FLOW_CF = ABS(FLOW/(FPSB-OUTPSB)/AVG_TRX)
          OUTRATE = OUTRATE/FLOW_CF
          OUTPSB = FPSB - OUTRATE/AVG_TRX
          DO IZ = 1,NZ
            FRAC_PS(IZ,NX+1) = OUTPSB
          END DO
        ELSE IF (INDEX(OUTFLOW,'TOP') > 0) THEN
          FLOW_CF = ABS(FLOW/(FPSB-OUTPSB)/AVG_TRZ)
          OUTRATE = OUTRATE/FLOW_CF
          OUTPSB = FPSB - OUTRATE/AVG_TRZ
          DO IX = 1,NX
            FRAC_PS(NZ+1,IX) = OUTPSB
          END DO
        ELSE IF (INDEX(OUTFLOW,'BOTTOM') > 0) THEN
          FLOW_CF = ABS(FLOW/(FPSB-OUTPSB)/AVG_TRZ)
          OUTRATE = OUTRATE/FLOW_CF
          OUTPSB = FPSB - OUTRATE/AVG_TRZ
          DO IX = 1,NX
            FRAC_PS(0,IX) = OUTPSB
          END DO
        ELSE
          GOTO 1000
        END IF
C
C       LOGGING CORRECTION FACTOR AND MAXIMUM RESIDUAL TO SCREEN
        WRITE(CVAR,620)FLOW_CF
        CALL MESSAGE(CVAR)
        WRITE(CVAR,640)Q(5,MAXLOC(ABS(Q(5,:))))
        CALL MESSAGE(CVAR)
C
C       COVERTING PSUEDO-PRESSURE TO REAL PRESSURE IF FLUID IS GAS
        OUTPB = OUTPSB
        IF (IFLUID == 1) CALL PS_TO_PR(OUTPB,OUTPSB,BOK)
        IF (.NOT. BOK) GOTO 1000
C
      END IF
C
C     SOLVING FOR FLOW THROUGH FRACTURE
      CALL FRAC_FLOW(BOK)
      IF (.NOT. BOK) GOTO 1000
      CALL BLANK
      CALL MESSAGE("     FINAL FRACTURE FLOWS CALCULATED")
C
C     CALCULATING AND WRITTING OUTPUT DATA
      CALL DEALLOCATE_COEF
      CALL OUTPUT_DATA
C
C     CLOSING OUTPUT FILES
      CLOSE(ISTAT)
      CLOSE(IMAP)
      CLOSE(IFLOX)
      CLOSE(IFLOZ)
      CLOSE(IFLOM)
      CLOSE(IPRES)
      CLOSE(IVTK)
C
      CALL BLANK
      CALL MESSAGE(" OUTPUT FILES CLOSED")
      CLOSE(IOUT)
C
      STOP
C
  600 FORMAT(5X,A,' BOUNDARY PRESSURE: ',3X,G20.9,1X,A)
C
  605 FORMAT(5X,A,' FLOW RATE CALCULATED: ',G20.9,1X,A)
C
  620 FORMAT(5X,'FLOW CORRECTION FACTOR USED: ',F13.9,1X,A)
C
  640 FORMAT(5X,'MAXIMUM NET FLOW RESIDUAL: ',G20.9,1X,A)
C
 1000 WRITE(*,"(1X)")
      WRITE(*,"('     **** EXITING PROGRAM ****')")
      STOP(1)
C
      END PROGRAM
