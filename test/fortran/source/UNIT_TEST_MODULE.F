      MODULE UNIT_TEST_MODULE
C
C     WRITTEN BY: MATTHEW STADELMAN
C     FILE DESCRIPTION: ACTS AS A HELPER MODULE TO HANDLE UNIT TESTING OF CODE.
C
C     LAST MODIFIED: 2016/07/14
C ----------------------------------------------------------------------
C               ---- VARIABLE DESCRIPTIONS ----
C
C  IOUT - UNIT NUMBER TO WRITE STANDARD OUTPUT
C  IERR - UNIT NUMBER TO WRITE STANDARD ERROR
C  MAX_MES_LEN - MAXIMUM NUMBER OF CHARACTERS A LOG MESSAGE CAN BE
C  PASSING - .TRUE. IF ALL TESTS HAVE PASSED
C  PROSECUTOR - THE FILE HOLDING THE TEST SUBROUTINES
C  DEFENDANT - THE FILE BEING TESTED
C
C ----------------------------------------------------------------------
C
      PUBLIC
C
      INTERFACE ASSERT_EQUALS
        MODULE PROCEDURE ASSERT_EQUALS_CHAR
      END INTERFACE
C
      INTEGER,SAVE :: IOUT, IERR, MAX_MES_LEN
      LOGICAL,SAVE :: PASSING
      CHARACTER(80), SAVE :: PROSECUTOR, DEFENDANT, PASS_FMT, FAIL_FMT
C
C
      CONTAINS
C
      SUBROUTINE INITIALIZE_TEST_MODULE
        !
        ! WRITTEN BY: MATTHEW STADELMAN
        ! LAST MODIFIED: 2016/07/14
        !
        ! PURPOSE: INITIALIZES TESTING VARIABLES
        !
        IMPLICIT NONE
        !
        IERR = 0
        IOUT = 6
        MAX_MES_LEN = 256
        PASS_FMT = "(2X,A,' - ',A,' : ',A,2X,'PASSED')"
        FAIL_FMT = "(2X,A,' - ',A,' : ',A,2X,'FAILED')"
        PASSING = .TRUE.
        CALL STO_MESSAGE(' SUCESSFULLY INITIALIZED TESTING MODULE')
        CALL STO_MESSAGE(' ')
        !
        RETURN
      END SUBROUTINE
C
      SUBROUTINE STO_MESSAGE(COUT)
        !
        ! WRITTEN BY: MATTHEW STADELMAN
        ! LAST MODIFIED: 2016/07/14
        !
        ! PURPOSE: WRITES A MESSAGE TO STDOUT OR EQUIVALENT LOG FILE
        !
        IMPLICIT NONE
        CHARACTER(*) :: COUT
        !
        WRITE(IOUT,"(A)") TRIM(COUT)
        !
        RETURN
      END SUBROUTINE
C
      SUBROUTINE STE_MESSAGE(COUT)
        !
        ! WRITTEN BY: MATTHEW STADELMAN
        ! LAST MODIFIED: 2016/07/14
        !
        ! PURPOSE: WRITES A MESSAGE TO STDERR OR EQUIVALENT LOG FILE
        !
        IMPLICIT NONE
        CHARACTER(*) :: COUT
        !
        WRITE(IERR,"(A)") TRIM(COUT)
        !
        RETURN
      END SUBROUTINE
C
      SUBROUTINE ASSERT_EQUALS_CHAR(VAL1, VAL2, TESTEE)
        !
        ! WRITTEN BY: MATTHEW STADELMAN
        ! LAST MODIFIED: 2016/07/14
        !
        ! PURPOSE: TESTS IF TWO STRINGS ARE EQUAL
        !
        IMPLICIT NONE
        CHARACTER(*) :: VAL1, VAL2, TESTEE
        CHARACTER(MAX_MES_LEN) :: CVAR, PRO
        !
        PRO = PROSECUTOR
        IF (TRIM(VAL1) == TRIM(VAL2)) THEN
          WRITE(CVAR,PASS_FMT)TRIM(PRO),TRIM(DEFENDANT),TRIM(TESTEE)
          CALL STO_MESSAGE(CVAR)
        ELSE
          WRITE(CVAR,FAIL_FMT)TRIM(PRO),TRIM(DEFENDANT),TRIM(TESTEE)
          CALL STE_MESSAGE(CVAR)
          WRITE(CVAR,1000)TRIM(VAL1),TRIM(VAL2)
          CALL STE_MESSAGE(CVAR)
        END IF
        !
 1000   FORMAT("8X,A,' /= ',A")
        !
        RETURN
      END SUBROUTINE
C
      END MODULE