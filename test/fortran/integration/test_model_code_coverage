#!/usr/bin/env python3
import os
import sys
from subprocess import Popen, PIPE
#
# setting path to
sys.path.insert(0, os.path.abspath(os.path.join('..', '..')))
from ApertureMapModelTools.RunModel import InputFile, run_model
from ApertureMapModelTools.RunModel import BulkRun
# -----------------------------------------------------------------------------
#
# global constants
GCCR_TEMPLATE = '../../bin/gccr.pl -n -c {0} raw {1} merged'
FIXTURE_DIR = os.path.realpath('fixtures')
# -----------------------------------------------------------------------------
#
# function defintions
def merge_gcov_files():
    #
    # generating fresh set of coverage files and finding them
    os.system('gcov *.F')
    find = Popen(['find', '.', '-maxdepth', '1', '-type', 'f', '-name', '*.gcov'],
                 stdout=PIPE,
                 universal_newlines=True)
    out, err = find.communicate()
    out = out[:-1] if out[-1] == '\n' else out
    files = out.split('\n')
    #
    # looping through files to merge them
    for f in files:
        merged_file = os.path.join('.','gcov_reports',f)
        cmd = GCCR_TEMPLATE.format(f,merged_file)
        gccr = Popen(cmd.split(), stdout=PIPE, universal_newlines=True)
        out, err = gccr.communicate()
        #
        # writing merged coverage file
        with open(merged_file, 'w') as f:
            f.write(out)
    #
    # removing old coverage files
    os.system('rm *.gcov')
# -----------------------------------------------------------------------------
#
# building test input file
file_formats = {
    'input_file': os.path.join('inp_files','test_model_coverage.inp')
}
inp_file = InputFile(os.path.join(FIXTURE_DIR, 'coverage_test.inp'),file_formats)
# updating exe-file path so it is absolute
exe_path = os.path.realpath(os.path.join('.', inp_file['EXE-FILE'].value))
inp_file['EXE-FILE'].update_value(exe_path, False)
#
# setting parameters
pvt_path = os.path.join(FIXTURE_DIR, 'H2O_TEMP_058F.CSV')
inp_file['PVT-PATH'].update_value(pvt_path)
map_path = os.path.join(FIXTURE_DIR, 'PARALELL-PLATE-01VOX.TXT')
inp_file['APER-MAP'].update_value(map_path)
#
# running initial liquid sim with PVT and AVG_VISC
run_model(inp_file, synchronous=True, show_stdout=True)
os.system('gcov *.F')
os.system('mv *.gcov gcov_reports')
#
# commenting out deprecated inputs so they don't cause issue
inp_file['FRAC-PRESS'].commented_out = True
inp_file['OUTFLOW-SIDE'].commented_out = True
inp_file['MANIFOLD'].commented_out = True
inp_file['SOLVER'].commented_out = True
#
# running gas sim with PVT and no AVG_VISC
inp_file['FLUID-VISCOSITY'].commented_out = True
inp_file['FLUID-TYPE'].update_value('GAS')
run_model(inp_file, synchronous=True, show_stdout=True)
merge_gcov_files()
#
# running left flow with no PVT, AVG_VISC and inlet rate control
inp_file['PVT-PATH'].commented_out = True
inp_file['FLUID-VISCOSITY'].commented_out = False
inp_file['INLET-PRESS'].commented_out = True
inp_file['FLUID-TYPE'].update_value('LIQUID')
inp_file['OUTLET-SIDE'].update_value('LEFT')
inp_file['INLET-RATE'].update_value('1.0')
run_model(inp_file, synchronous=True, show_stdout=True)
merge_gcov_files()
#
# running right flow with outlet rate control
inp_file['INLET-RATE'].commented_out = True
inp_file['OUTLET-PRESS'].commented_out = True
inp_file['INLET-PRESS'].update_value('2000000')
inp_file['OUTLET-SIDE'].update_value('RIGHT')
inp_file['OUTLET-RATE'].update_value('1.0')
run_model(inp_file, synchronous=True, show_stdout=True)
merge_gcov_files()
#
# running bottom flow
inp_file['OUTLET-SIDE'].update_value('BOTTOM')
run_model(inp_file, synchronous=True, show_stdout=True)
merge_gcov_files()


