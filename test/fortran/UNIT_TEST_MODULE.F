      MODULE UNIT_TEST_MODULE
C
C     WRITTEN BY: MATTHEW STADELMAN
C     FILE DESCRIPTION: ACTS AS A HELPER MODULE TO HANDLE UNIT TESTING OF CODE.
C
C     LAST MODIFIED: 2016/07/14
C ----------------------------------------------------------------------
C               ---- VARIABLE DESCRIPTIONS ----
C
C  EPS - VALUE OF EPSILON TO USE WHEN COMPARING FLOATS
C  IOUT - UNIT NUMBER TO WRITE STANDARD OUTPUT
C  IOUT - UNIT NUMBER TO WRITE STANDARD ERROR
C  MAX_MES_LEN - MAXIMUM NUMBER OF CHARACTERS A LOG MESSAGE CAN BE
C  PASSING - .TRUE. IF ALL TESTS HAVE PASSED
C  PROSECUTOR - THE FILE HOLDING THE TEST SUBROUTINES
C  DEFENDANT - THE FILE BEING TESTED
C
C ----------------------------------------------------------------------
C
      PUBLIC
C
      INTERFACE ASSERT_EQUALS
        MODULE PROCEDURE ASSERT_EQUALS_CHAR, ASSERT_EQUALS_CHAR_ARRAY
        MODULE PROCEDURE ASSERT_EQUALS_INT
        MODULE PROCEDURE ASSERT_EQUALS_REAL8
        MODULE PROCEDURE ASSERT_EQUALS_LOGI
      END INTERFACE
C
      REAL(8), SAVE :: EPS = EPSILON(1.0D0)/EPSILON(1.0)
      INTEGER,SAVE :: IOUT, MAX_MES_LEN
      LOGICAL,SAVE :: ALL_PASS, PASSING
      CHARACTER(80), SAVE :: PROSECUTOR, DEFENDANT, PASS_FMT, FAIL_FMT
      CHARACTER(80), SAVE :: ORIG_STD_OUT_LOC, STD_OUT_LOG
      ! COLORS
      CHARACTER(5) :: NC = achar(27)//'[00m' ! RESET COLOR
      CHARACTER(7) :: GR = achar(27)//'[0;32m' ! GREEN
      CHARACTER(7) :: RD = achar(27)//'[1;31m' ! RED
C
C
      CONTAINS
C
      SUBROUTINE INITIALIZE_TEST_MODULE
        !
        ! WRITTEN BY: MATTHEW STADELMAN
        ! LAST MODIFIED: 2016/07/14
        !
        ! PURPOSE: INITIALIZES TESTING VARIABLES
        !
        IMPLICIT NONE
        !
        IOUT = 6
        MAX_MES_LEN = 256
        PASS_FMT = "(2X,A,' - ',A,' : ',A,1X,'"//GR//"PASSED"//NC//"')"
        FAIL_FMT = "(2X,A,' - ',A,' : ',A,1X,'"//RD//"FAILED"//NC//"')"
        ALL_PASS = .TRUE.
        STD_OUT_LOG = 'STD-LOG-FILE.TXT'
        INQUIRE(6, NAME=ORIG_STD_OUT_LOC)
        CALL STO_MESSAGE(' ')
        CALL STO_MESSAGE(' SUCESSFULLY INITIALIZED TESTING MODULE')
        !
        RETURN
      END SUBROUTINE
C
      SUBROUTINE INIT_TEST
        !
        ! WRITTEN BY: MATTHEW STADELMAN
        ! LAST MODIFIED: 2016/07/18
        !
        ! PURPOSE: INITIALIZES AN INDIVIDUAL TEST
        !
        IMPLICIT NONE
        CALL CAPTURE_STD_OUT
        PASSING = .TRUE.
        !
        RETURN
      END SUBROUTINE
C
      SUBROUTINE END_TEST(TEST_NAME)
        !
        ! WRITTEN BY: MATTHEW STADELMAN
        ! LAST MODIFIED: 2016/07/18
        !
        ! PURPOSE: HANDLES ENDING AN INDIVIDUAL TEST
        !
        IMPLICIT NONE
        CHARACTER(*) :: TEST_NAME
        CHARACTER(MAX_MES_LEN) :: CVAR, PRO
        PRO = PROSECUTOR
        !
        ! RELEASING STD_OUT AND PRINTING IT TO THE SCREEN IF NEEEDED
        CALL RELEASE_STD_OUT
        IF (PASSING) THEN
          WRITE(CVAR,PASS_FMT)TRIM(PRO),TRIM(DEFENDANT),TRIM(TEST_NAME)
          CALL STO_MESSAGE(CVAR)
        ELSE
          WRITE(CVAR,FAIL_FMT)TRIM(PRO),TRIM(DEFENDANT),TRIM(TEST_NAME)
          CALL STO_MESSAGE(CVAR)
          CALL PRINT_CAPTURED_STDOUT
          ALL_PASS = .FALSE.
        END IF
        !
        RETURN
      END SUBROUTINE
C
      SUBROUTINE STO_MESSAGE(COUT)
        !
        ! WRITTEN BY: MATTHEW STADELMAN
        ! LAST MODIFIED: 2016/07/14
        !
        ! PURPOSE: WRITES A MESSAGE TO STDOUT OR EQUIVALENT LOG FILE
        !
        IMPLICIT NONE
        CHARACTER(*) :: COUT
        !
        WRITE(IOUT,"(A)") TRIM(COUT)
        !
        RETURN
      END SUBROUTINE
C
      SUBROUTINE CAPTURE_STD_OUT
        !
        ! WRITTEN BY: MATTHEW STADELMAN
        ! LAST MODIFIED: 2016/07/14
        !
        ! PURPOSE: WRITES ALL STDOUT TO A LOG FILE
        !
        IMPLICIT NONE
        OPEN(UNIT=6, FILE=STD_OUT_LOG)
        !
        RETURN
      END SUBROUTINE
C
      SUBROUTINE PRINT_CAPTURED_STDOUT
        !
        ! WRITTEN BY: MATTHEW STADELMAN
        ! LAST MODIFIED: 2016/07/14
        !
        ! PURPOSE: READS AND PRINTS CAPTURED STD OR CLOSES AN OPEN LOG FILE
        !
        IMPLICIT NONE
        INTEGER :: IO
        CHARACTER(MAX_MES_LEN) :: CVAR
        !
        OPEN(UNIT=10, FILE=STD_OUT_LOG, ACTION='READ')
        WRITE(*,"(A,80('='),A)")RD,NC
        WRITE(*,"(A)")'CAPTURED STANDARD OUT'
        DO
          READ(10,'(A)', IOSTAT=IO) CVAR
          IF (IO > 0) EXIT
          WRITE(*,"(4X,A)") TRIM(CVAR)
        END DO
        WRITE(*,"(A,80('='),A)")RD,NC
        CLOSE(10)
        !
        RETURN
      END SUBROUTINE
C
      SUBROUTINE RELEASE_STD_OUT
        !
        ! WRITTEN BY: MATTHEW STADELMAN
        ! LAST MODIFIED: 2016/07/14
        !
        ! PURPOSE: READS AND PRINTS CAPTURED STD OR CLOSES AN OPEN LOG FILE
        !
        IMPLICIT NONE
        !
        ! CLOSING THE LOG FILE AND RE-ENABLING NORMAL OUTPUT
        CLOSE(6)
        OPEN(UNIT=6, FILE=ORIG_STD_OUT_LOC)
        !
        RETURN
      END SUBROUTINE
C
      SUBROUTINE ASSERT_EQUALS_CHAR(VAL1, VAL2, TESTEE)
        !
        ! WRITTEN BY: MATTHEW STADELMAN
        ! LAST MODIFIED: 2016/07/14
        !
        ! PURPOSE: TESTS IF TWO STRINGS ARE EQUAL
        !
        IMPLICIT NONE
        CHARACTER(*) :: VAL1, VAL2, TESTEE
        CHARACTER(MAX_MES_LEN) :: CVAR, PRO
        !
        PRO = PROSECUTOR
        IF (TRIM(VAL1) == TRIM(VAL2)) THEN
          WRITE(CVAR,PASS_FMT)TRIM(PRO),TRIM(DEFENDANT),TRIM(TESTEE)
          CALL STO_MESSAGE(CVAR)
        ELSE
          PASSING = .FALSE.
          WRITE(CVAR,FAIL_FMT)TRIM(PRO),TRIM(DEFENDANT),TRIM(TESTEE)
          CALL STO_MESSAGE(CVAR)
          WRITE(CVAR,"(8X,A,' != ',A)")TRIM(VAL1), TRIM(VAL2)
          CALL STO_MESSAGE(CVAR)
        END IF
        !
        RETURN
      END SUBROUTINE
C
      SUBROUTINE ASSERT_EQUALS_CHAR_ARRAY(ARR1, ARR2, TESTEE)
        !
        ! WRITTEN BY: MATTHEW STADELMAN
        ! LAST MODIFIED: 2016/07/14
        !
        ! PURPOSE: TESTS IF TWO CHARACTER ARRAYS ARE EQUAL
        !
        IMPLICIT NONE
        INTEGER :: I
        LOGICAL :: LEN_FAIL, VAL_FAIL
        CHARACTER(*) :: ARR1(:), ARR2(:), TESTEE
        CHARACTER(80) :: LEN_FMT, VAL_FMT
        CHARACTER(MAX_MES_LEN) :: CVAR, LENM, VALM, PRO
        !
        LEN_FMT = "(8X,'ARRAY LENGTH DIFFERS: ',I0,' != ',I0)"
        VAL_FMT = "(8X,'ARRAY VALUES DIFFER:')"
        PRO = PROSECUTOR
        WRITE(CVAR,PASS_FMT)TRIM(PRO),TRIM(DEFENDANT),TRIM(TESTEE)
        !
        ! TESTING ARRAY LENGTH
        IF (SIZE(ARR1) /= SIZE(ARR2)) THEN
          PASSING = .FALSE.
          LEN_FAIL = .TRUE.
          WRITE(LENM,LEN_FMT)SIZE(ARR1),SIZE(ARR2)
        END IF
        !
        ! TESTING ARRAY VALUES
        DO I = 1, MIN(SIZE(ARR1),SIZE(ARR2))
          IF (TRIM(ARR1(I)) /= TRIM(ARR2(I))) THEN
            PASSING = .FALSE.
            VAL_FAIL = .TRUE.
            WRITE(VALM,VAL_FMT)
          END IF
        END DO
        !
        ! ERROR MESSAGES
        IF (LEN_FAIL .OR. VAL_FAIL) THEN
          WRITE(CVAR,FAIL_FMT)TRIM(PRO),TRIM(DEFENDANT),TRIM(TESTEE)
          CALL STO_MESSAGE(CVAR)
        ELSE
          WRITE(CVAR,PASS_FMT)TRIM(PRO),TRIM(DEFENDANT),TRIM(TESTEE)
          CALL STO_MESSAGE(CVAR)
        END IF
        !
        IF (LEN_FAIL) THEN
          CALL STO_MESSAGE(LENM)
        END IF
        !
        IF (VAL_FAIL) THEN
          CALL STO_MESSAGE(VALM)
          WRITE(IOUT,*)'ARR1',' ARR2'
          DO I = 1, MAX(SIZE(ARR1),SIZE(ARR2))
            IF (I <= SIZE(ARR1) .AND. I <= SIZE(ARR2)) THEN
              WRITE(IOUT,*)TRIM(ARR1(I)),', ',TRIM(ARR2(I))
            END IF
            IF (I < SIZE(ARR1) .AND. I >= SIZE(ARR2)) THEN
              WRITE(IOUT,*) TRIM(ARR1(I)), ',  ? '
            END IF
            IF (I >= SIZE(ARR1) .AND. I < SIZE(ARR2)) THEN
              WRITE(IOUT,*) ' ?  , ',TRIM(ARR2(I))
            END IF
          END DO
        END IF
        !
        RETURN
      END SUBROUTINE
C
      SUBROUTINE ASSERT_EQUALS_INT(VAL1, VAL2, TESTEE)
        !
        ! WRITTEN BY: MATTHEW STADELMAN
        ! LAST MODIFIED: 2016/07/14
        !
        ! PURPOSE: TESTS IF TWO INTEGERS ARE EQUAL
        !
        IMPLICIT NONE
        INTEGER :: VAL1, VAL2
        CHARACTER(*) :: TESTEE
        CHARACTER(MAX_MES_LEN) :: CVAR, PRO
        !
        PRO = PROSECUTOR
        IF (VAL1 == VAL2) THEN
          WRITE(CVAR,PASS_FMT)TRIM(PRO),TRIM(DEFENDANT),TRIM(TESTEE)
          CALL STO_MESSAGE(CVAR)
        ELSE
          PASSING = .FALSE.
          WRITE(CVAR,FAIL_FMT)TRIM(PRO),TRIM(DEFENDANT),TRIM(TESTEE)
          CALL STO_MESSAGE(CVAR)
          WRITE(CVAR,"(8X,I0,' != ',I0)")VAL1, VAL2
          CALL STO_MESSAGE(CVAR)
        END IF
        !
        RETURN
      END SUBROUTINE
C
      SUBROUTINE ASSERT_EQUALS_REAL8(VAL1, VAL2, TESTEE)
        !
        ! WRITTEN BY: MATTHEW STADELMAN
        ! LAST MODIFIED: 2016/07/15
        !
        ! PURPOSE: TESTS IF TWO REAL VALUES ARE EFFECTIVELY EQUAL
        !
        IMPLICIT NONE
        REAL(8) :: VAL1, VAL2
        CHARACTER(*) :: TESTEE
        CHARACTER(MAX_MES_LEN) :: CVAR, PRO, MFMT
        !
        MFMT = "(8X,G0.9,' != ',G0.9,' DIFF:',G0.9)"
        PRO = PROSECUTOR
        IF (ABS(VAL1-VAL2) < EPS) THEN
          WRITE(CVAR,PASS_FMT)TRIM(PRO),TRIM(DEFENDANT),TRIM(TESTEE)
          CALL STO_MESSAGE(CVAR)
        ELSE
          PASSING = .FALSE.
          WRITE(CVAR,FAIL_FMT)TRIM(PRO),TRIM(DEFENDANT),TRIM(TESTEE)
          CALL STO_MESSAGE(CVAR)
          WRITE(CVAR,MFMT)VAL1,VAL2,VAL1-VAL2
          CALL STO_MESSAGE(CVAR)
        END IF
        !
        RETURN
      END SUBROUTINE
C
      SUBROUTINE ASSERT_EQUALS_LOGI(VAL1, VAL2, TESTEE)
        !
        ! WRITTEN BY: MATTHEW STADELMAN
        ! LAST MODIFIED: 2016/07/15
        !
        ! PURPOSE: TESTS IF TWO LOGICAL VALUES ARE EFFECTIVELY EQUAL
        !
        IMPLICIT NONE
        LOGICAL :: VAL1, VAL2
        CHARACTER(*) :: TESTEE
        CHARACTER(MAX_MES_LEN) :: CVAR, PRO
        !
        PRO = PROSECUTOR
        IF (VAL1 .EQV. VAL2) THEN
          WRITE(CVAR,PASS_FMT)TRIM(PRO),TRIM(DEFENDANT),TRIM(TESTEE)
          CALL STO_MESSAGE(CVAR)
        ELSE
          PASSING = .FALSE.
          WRITE(CVAR,FAIL_FMT)TRIM(PRO),TRIM(DEFENDANT),TRIM(TESTEE)
          CALL STO_MESSAGE(CVAR)
          WRITE(CVAR,"(8X,G0.6,' != ',G0.6)")VAL1, VAL2
          CALL STO_MESSAGE(CVAR)
        END IF
        !
        RETURN
      END SUBROUTINE
C
      END MODULE