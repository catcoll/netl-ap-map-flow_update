#!/usr/bin/env python3
import os
import re
from subprocess import Popen, PIPE
import sys
#
# setting path to module
sys.path.insert(0, os.path.abspath(os.path.join('..', '..')))
from ApertureMapModelTools.RunModel import InputFile, run_model
from ApertureMapModelTools.RunModel.__run_model_core__ import ArgInput
# -----------------------------------------------------------------------------
#
# global constants
FIXTURE_DIR = os.path.realpath('fixtures')
INIT_INP_FILE = os.path.join(FIXTURE_DIR, 'coverage_test.inp')
RETURN_CODE = 0
# -----------------------------------------------------------------------------


def run_model_wrapper(inp_file, expected_code=0, stdout_pat=None):
    r"""
    Handles running of the model and checking the completed process for
    the expected return code and can also search the stdout with a regexp
    pattern
    """
    global RETURN_CODE
    success = True
    proc = run_model(inp_file, synchronous=True, show_stdout=False)
    #
    if proc.returncode != expected_code:
        success = False
    #
    if stdout_pat and not stdout_pat.search(proc.stdout_content):
        success = False
    #
    if not success:
        print('='*80)
        print(proc.stdout_content)
        print('')
        print(proc.stderr_content)
        print('='*80)
        #
        RETURN_CODE = proc.returncode

# -----------------------------------------------------------------------------
#
# running cases that should succeed
#
# building test input file
file_formats = {
    'input_file': os.path.join('.', 'test_model_coverage.inp')
}
inp_file = InputFile(INIT_INP_FILE, file_formats)
#
# updating exe-file path so it is absolute
exe_path = os.path.realpath(os.path.join('.', inp_file['EXE-FILE'].value))
inp_file['EXE-FILE'].update_value(exe_path, False)
#
# setting parameters
map_path = os.path.join(FIXTURE_DIR, 'ParallelPlate-1vox.txt')
inp_file['APER-MAP'].update_value(map_path)
inp_file['OVERWRITE'].commented_out = True
inp_file['BAD-INPUT'] = ArgInput('BAD-INPUT: VALUE')
#
# running initial liquid sim with everything to set up base coverage
run_model_wrapper(inp_file, stdout_pat=re.compile('WARNING: UNRECOGNIZED INPUT: BAD-INPUT: VALUE'))
#
# commenting/ uncommenting some inputs so they don't cause issue
map_path = os.path.join(FIXTURE_DIR, 'Fracture1ApertureMap-10avg.txt')
inp_file['APER-MAP'].update_value(map_path)
inp_file['SUMMARY-FILE'].commented_out = True
inp_file['OVERWRITE'].commented_out = False
inp_file['FRAC-PRESS'].commented_out = True
inp_file['OUTFLOW-SIDE'].commented_out = True
inp_file['MANIFOLD'].commented_out = True
inp_file['SOLVER'].commented_out = True
#
# running sim with outlet rate control
inp_file['INLET-RATE'].commented_out = True
inp_file['OUTLET-PRESS'].commented_out = True
inp_file['INLET-PRESS'].update_value('2000000')
inp_file['OUTLET-RATE'].update_value('1.0')
run_model_wrapper(inp_file, stdout_pat=re.compile('USING AVERAGE LIQUID VISCOSITY'))
#
# changing map to one with NX > NZ
map_path = os.path.join(FIXTURE_DIR, 'Fracture3ApertureMap-10avg.txt')
inp_file['APER-MAP'].update_value(map_path)
#
# running all four boundary sides with inlet rate control
inp_file['INLET-PRESS'].commented_out = True
inp_file['OUTLET-RATE'].commented_out = True
inp_file['INLET-RATE'].update_value('1.0')
inp_file['OUTLET-PRESS'].update_value('0.0')
for side in ['TOP', 'BOTTOM', 'LEFT', 'RIGHT']:
    inp_file['OUTLET-SIDE'].update_value(side)
    run_model_wrapper(inp_file)
#
# -----------------------------------------------------------------------------
#
# running failing cases
#
# running it with no input file
cmd = (os.path.abspath(inp_file['EXE-FILE'].value),)
proc = Popen(cmd, stdout=PIPE, stderr=PIPE, universal_newlines=True)
proc.stdout_content, proc.stderr_content = proc.communicate()
if not re.search('FATAL ERROR - NO INPUT FILE', proc.stdout_content):
    RETURN_CODE = 1
if proc.returncode == 0:
    RETURN_CODE = 1
#
# bad VTK-FILE value
inp_file['VTK-FILE'].update_value('')
run_model_wrapper(inp_file, expected_code=1, stdout_pat=re.compile('INSUFFICIENT'))
inp_file['VTK-FILE'].commented_out = True
#
# no aperture map
inp_file['APER-MAP'].commented_out = True
run_model_wrapper(inp_file, expected_code=1, stdout_pat=re.compile('FATAL ERROR - NO APERTURE MAP'))
inp_file['APER-MAP'].commented_out = False
#
# trying to run sim that overwrites some files without permission given
inp_file['OVERWRITE'].commented_out = True
os.remove(inp_file['SUMMARY-FILE'].value)
run_model_wrapper(inp_file, expected_code=1, stdout_pat=re.compile('SPECIFY "OVERWRITE" IN THE'))
inp_file['OVERWRITE'].commented_out = False
#
# trying to run sim that writes a file to a non-existant location
inp_file['VTK-FILE'].update_value('/non/existant/root/path/test.txt')
run_model_wrapper(inp_file, expected_code=1, stdout_pat=re.compile('IO ERROR:\s*\d+'))
inp_file['VTK-FILE'].commented_out = True
#
# hitting errors when processing initialization file, missing and invalid field
inp_file['OUTLET-PRESS'].update_value('')
run_model_wrapper(inp_file, expected_code=1, stdout_pat=re.compile('INSUFFICIENT'))
inp_file['OUTLET-PRESS'].update_value('ABC')
run_model_wrapper(inp_file, expected_code=1, stdout_pat=re.compile('FIELD\s*\d+\s*ON THE'))
inp_file['OUTLET-PRESS'].commented_out = True
#
# bad aperture map
map_path = os.path.join(FIXTURE_DIR, 'BadApertureMap.txt')
inp_file['APER-MAP'].update_value(map_path)
run_model_wrapper(inp_file, expected_code=1, stdout_pat=re.compile('FIELD\s*\d+\s*ON THE'))
map_path = os.path.join(FIXTURE_DIR, 'Fracture1ApertureMap-10avg.txt')
inp_file['APER-MAP'].update_value(map_path)
#
# too large of a map along either axis
inp_file['MAXIMUM'].update_value(135)
run_model_wrapper(inp_file, expected_code=1, stdout_pat=re.compile('MAXIMUM NUMBER OF HORIZONTAL'))
inp_file['MAXIMUM'].update_value(137)
run_model_wrapper(inp_file, expected_code=1, stdout_pat=re.compile('MAXIMUM NUMBER OF VERTICAL'))
inp_file['MAXIMUM'].update_value(500)
#
# liquid sim with invalid visc
inp_file['FLUID-VISCOSITY'].update_value('-1.0')
run_model_wrapper(inp_file, expected_code=1, stdout_pat=re.compile('ERROR - NONE OR INVAILD VISCOSITY'))
inp_file['FLUID-VISCOSITY'].update_value('1.0')
#
# invalid outlet side
inp_file['OUTLET-SIDE'].update_value('CENTER')
run_model_wrapper(inp_file, expected_code=1, stdout_pat=re.compile('INVALID OUTLET SIDE ENTERED'))
inp_file['OUTLET-SIDE'].update_value('TOP')
#
sys.exit(RETURN_CODE)
