#!/usr/bin/env python3
r"""
Builds the flow model from source code.
"""
import argparse
import os
from subprocess import Popen
import ApertureMapModelTools as amt

# setting up arg parser
parser = argparse.ArgumentParser(description='Builds the flow model from source code')
parser.add_argument('-n', '--name', default=amt.DEFAULT_MODEL_NAME,
                    help='Name to build the executable under (default: %(default)s)')
parser.add_argument('-o', '--output-dir', default=amt.__path__[0],
                    help='Location to save execuable at (default: %(default)s)')
parser.add_argument('target', nargs='?', default=None, help='makefile target to build',
                    choices=set((None, 'debug', 'test', 'clean')))

def build_model():
    # getting command line args
    args = parser.parse_args()

    # determining path to pass to makefile
    src_path = os.path.join(amt.__path__[0], 'src')
    exe_file = os.path.join(amt.__path__[0], 'src', 'dist', args.name)
    out_file = os.path.join(args.output_dir, args.name)

    # running make
    cmd = ('make', args.target, 'MODELNAME=' + args.name, '-C', src_path)
    cmd = tuple([param for param in cmd if param])
    proc = Popen(cmd, stdout=None, stderr=None, universal_newlines=True)
    proc.wait()

    # moving the file up to the main namespace
    if os.path.isfile(out_file):
        os.remove(out_file)
    if args.target != 'clean':
        os.rename(exe_file, out_file)

    # exit with same return code as make
    exit(proc.returncode)

if __name__ == '__main__':
    build_model()
