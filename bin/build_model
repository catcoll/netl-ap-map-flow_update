#!/usr/bin/env python3
r"""
Builds the flow model from source code.
"""
import argparse
import os
from subprocess import Popen
from ApertureMapModelTools import DEFAULT_MODEL_PATH, DEFAULT_MODEL_NAME
from ApertureMapModelTools import _get_logger, set_main_logger_level

# setting up arg parser
parser = argparse.ArgumentParser(description='Builds the flow model from source code')

parser.add_argument('-n', '--name', default=DEFAULT_MODEL_NAME,
                    help='Name to build the executable under (default: %(default)s)')

parser.add_argument('-o', '--output-dir', default=DEFAULT_MODEL_PATH,
                    type=os.path.realpath,
                    help='Location to save execuable at (default: %(default)s)')

parser.add_argument('-m', '--make-exec', default='make',
                    help='make executable to use (default: %(default)s)')

parser.add_argument('--src-dir', default=os.path.join(DEFAULT_MODEL_PATH, 'src'),
                    type=os.path.realpath,
                    help='Location of the model source code (default: %(default)s)')

parser.add_argument('targets', nargs='?', default=None, help='makefile target to build',
                    choices=[None, 'all', 'rebuild', 'debug', 'clean', 'test'])

parser.add_argument('env_vars', nargs='*', default=[],
                    help='makefile environment variables, must specify target')

# setting up logger
set_main_logger_level('info')
logger = _get_logger('ApertureMapModelTools.build_model')


def build_model():
    # getting command line args
    args = parser.parse_args()

    # determining src path to pass to makefile
    exe_file = os.path.join(args.src_dir, 'dist', args.name)
    out_file = os.path.join(args.output_dir, args.name)
    logger.info('Compiling source in: {}'.format(args.src_dir))

    # building command
    cmd = [args.make_exec, '-C', args.src_dir, args.targets, 'MODELNAME=' + args.name]
    cmd.extend(args.env_vars)
    cmd = tuple([param for param in cmd if param])

    # running make
    logger.info('Makefile command: {}'.format(' '.join(cmd)))
    proc = Popen(cmd, stdout=None, stderr=None, universal_newlines=True)
    proc.wait()

    # moving the file up to the main namespace and removing the old one
    if os.path.isfile(out_file):
        logger.info('Removing pre-existing file: {}'.format(out_file))
        os.remove(out_file)
    if os.path.isfile(exe_file):
        logger.info('Moving executable to: {}'.format(out_file))
        os.rename(exe_file, out_file)
    else:
        logger.warning('No executable found at: {}'.format(exe_file))

    # exit with same return code as make
    exit(proc.returncode)


if __name__ == '__main__':
    build_model()
