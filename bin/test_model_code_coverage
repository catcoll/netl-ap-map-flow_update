#!/usr/bin/env python3
import os
import sys
#
# setting path to
sys.path.insert(0, os.path.abspath(os.path.join('..', '..')))
from ApertureMapModelTools.RunModel import InputFile, run_model
from ApertureMapModelTools.RunModel import BulkRun
#
os.makedirs('inp_files')
FIXTURE_DIR = os.path.join('..', 'fixtures')
#
# building test input file
file_formats = {
    'input_file': os.path.join('inp_files','test_model_coverage.inp')
}
inp_file = InputFile(os.path.join(FIXTURE_DIR, 'TEST_INIT.INP'),file_formats)
# updating exe-file path so it is absolute
exe_path = os.path.realpath(os.path.join('.', inp_file['EXE-FILE'].value))
inp_file['EXE-FILE'].update_value(exe_path, False)
#
# setting all of the file arguments to default values and commented out
files = ['PVT-PATH', 'SUMMARY-PATH', 'STAT-FILE', 'APER-FILE',
         'FLOW-FILE', 'PRESS-FILE', 'VTK-FILE']
for key in files:
    inp_file[key].update_value('',False)
    inp_file[key].commented_out = True
#
# setting parameters
map_path = os.path.join(FIXTURE_DIR, 'TEST-FRACTURES', 'PARALELL-PLATE-01VOX.TXT')
inp_file['APER-MAP'].update_value(map_path)
#
run_model(inp_file, synchronous=True, show_stdout=True)
os.system('gcov *.F')
os.system('mv *.gcov gcov_reports')


