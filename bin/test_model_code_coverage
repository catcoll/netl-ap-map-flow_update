#!/usr/bin/env python3
import os
import sys
from subprocess import Popen, PIPE
#
# setting path to
sys.path.insert(0, os.path.abspath(os.path.join('..', '..')))
from ApertureMapModelTools.RunModel import InputFile, run_model
from ApertureMapModelTools.RunModel import BulkRun
#
try:
    os.makedirs('inp_files')
except FileExistsError:
  pass
#
# global constants
GCCR_TEMPLATE = '../../bin/gccr.pl -n -c {0} raw {1} merged'
FIXTURE_DIR = os.path.join('..', 'fixtures')
#
# function defintions
def merge_gcov_files():
    find = Popen(['find', '.', '-maxdepth', '1', '-type', 'f', '-name', '*.gcov'],
                 stdout=PIPE,
                 universal_newlines=True)
    out, err = find.communicate()
    out = out[:-1] if out[-1] == '\n' else out
    files = out.split('\n')
    #
    # looping through files to merge them
    for f in files:
        merged_file = os.path.join('.','gcov_reports',f)
        cmd = GCCR_TEMPLATE.format(f,merged_file)
        gccr = Popen(cmd.split(), stdout=PIPE, universal_newlines=True)
        out, err = gccr.communicate()
        with open(merged_file, 'w') as f:
            f.write(out)
#
# building test input file
file_formats = {
    'input_file': os.path.join('inp_files','test_model_coverage.inp')
}
inp_file = InputFile(os.path.join(FIXTURE_DIR, 'TEST_INIT.INP'),file_formats)
# updating exe-file path so it is absolute
exe_path = os.path.realpath(os.path.join('.', inp_file['EXE-FILE'].value))
inp_file['EXE-FILE'].update_value(exe_path, False)
#
# setting all of the file arguments to default values and commented out
files = ['SUMMARY-PATH', 'STAT-FILE', 'APER-FILE',
         'FLOW-FILE', 'PRESS-FILE', 'VTK-FILE']
for key in files:
    inp_file[key].update_value(os.path.join('','temp-'+key+'file.tmp'),False)
#
# setting parameters
pvt_path = os.path.join(FIXTURE_DIR, 'PVT', 'H2O_TEMP_058F.CSV')
inp_file['PVT-PATH'].update_value(pvt_path)
map_path = os.path.join(FIXTURE_DIR, 'TEST-FRACTURES', 'PARALELL-PLATE-01VOX.TXT')
inp_file['APER-MAP'].update_value(map_path)
#
# running initial liquid sim
run_model(inp_file, synchronous=True, show_stdout=True)
os.system('gcov *.F')
os.system('mv *.gcov gcov_reports')
#
# running gas sim
inp_file['FLUID-VISCOSITY'].commented_out = True
inp_file['FLUID-TYPE'].update_value('GAS')
run_model(inp_file, synchronous=True, show_stdout=True)
os.system('gcov *.F')
merge_gcov_files()
os.system('rm *.gcov')


